#!/bin/bash

install() {
  # prepare vars
  local name="$PACKAGE_CORE_NAME"

  log::info "[$(timestamp)][package][$name] preparing ..."

  # get system os/arch
  local os="$PACKAGE_OS"
  local arch="$PACKAGE_OS_ARCH"
  local kernel="$PACKAGE_OS_KERNEL"
  local platform="$PACKAGE_OS_PLATFORM"
  # usr_bin_dir
  local usr_bin_dir="$PACKAGE_USER_BIN_DIR"
  local tmp_dir="$PACKAGE_TMP_DIR"

  # case $arch in
  # arm64) ;;

  # amd64)
  #   arch="x86_64"
  #   ;;
  # *)
  #   log::error "[$(timestamp)] unsupport arch: $arch"
  #   return 1
  #   ;;
  # esac
  # #

  # # get latest version
  # log::info "[$(timestamp)][package][$name] checking latest version ..."
  # local latest_version=$(git::get_remote_latest_tag $PACKAGE_CORE_GIT_REPOSITORY)
  # if [ "$?" != "0" ]; then
  #   log::error "[$(timestamp)][package][$name] failed to get latest version ."
  #   return 1
  # fi
  # PACKAGE_CORE_VERSION=$latest_version
  # log::success "[$(timestamp)][package][$name] latest version: $PACKAGE_CORE_VERSION"

  # files
  local filename="${name}-${platform}-${arch}"
  local source_bin_file="./$name"
  #
  case $platform in
  darwin)
    filename="${name}_mac_${arch}.zip"
    source_bin_file="./$name"
    ;;
  linux)
    filename="${name}_linux_${arch}"
    source_bin_file="./$filename"
    ;;
  *)
    log::error "[$(timestamp)] unsupport platform: $platform"
    return 1
    ;;
  esac

  local tmp_file="./$filename"

  # reference: https://github.com/9seconds/mtg/releases
  # example:
  #   https://github.com/AlexxIT/go2rtc/releases/download/v1.7.1/go2rtc_mac_amd64.zip
  #   https://github.com/AlexxIT/go2rtc/releases/download/v1.7.1/go2rtc_mac_arm64.zip
  #   https://github.com/AlexxIT/go2rtc/releases/download/v1.7.1/go2rtc_linux_amd64
  #   https://github.com/AlexxIT/go2rtc/releases/download/v1.7.1/go2rtc_linux_arm64
  # generate url
  local url="${PACKAGE_CORE_RELEASE_DOWNLOAD}/$PACKAGE_CORE_VERSION/$filename"
  log::debug "[$(timestamp)][package][$name][$kernel][$arch] url: $url, file: ${tmp_file}, tmp_dir: $tmp_dir"

  log::info "[$(timestamp)][package][$name] os: $os"
  log::info "[$(timestamp)][package][$name] arch: $arch"
  log::info "[$(timestamp)][package][$name] kernel: $kernel"
  log::info "[$(timestamp)][package][$name] platform: $platform"
  log::info "[$(timestamp)][package][$name] usr_bin_dir: $usr_bin_dir"
  log::info "[$(timestamp)][package][$name] source_bin_file: $source_bin_file"
  log::info "[$(timestamp)][package][$name] url: $url"
  log::info "[$(timestamp)][package][$name] tmp_dir: $tmp_dir"
  log::info "[$(timestamp)][package][$name] tmp_file: $tmp_file"
  if [ -n "$PLUGIN_PACKAGE_INSTALL_MODE" ]; then
    log::info "[$(timestamp)][package][$name] mode: $PLUGIN_PACKAGE_INSTALL_MODE"
  fi

  # prepare context
  cd $tmp_dir

  # download
  log::info "[$(timestamp)][package][$name] downloading ..."
  os::download $tmp_file $url
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][package][$name] failed to download from $url ."
    return 1
  fi

  #
  case $platform in
  darwin)
    # extract
    log::info "[$(timestamp)][package][$name] extracting ..."
    os::extract $tmp_file
    ;;
  linux)
    ;;
  *)
    log::error "[$(timestamp)] unsupport platform: $platform"
    return 1
    ;;
  esac

  # install
  log::info "[$(timestamp)][package][$name] installing ..."
  os::install $source_bin_file $usr_bin_dir $name

  if [ "$PLUGIN_PACKAGE_INSTALL_MODE" != "test" ]; then
    # clean
    log::info "[$(timestamp)][package][$name] cleaning ..."
    rm -rf $tmp_dir
  fi
}

export -f install
